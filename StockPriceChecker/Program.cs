// Write a C# console app to fetch the MSFT stock price 
// from the Yahoo finance API. Add comments to the code.
// Generated by GitHub Copilot Claude 3.7 Sonnet (Preview)

using System;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;

namespace StockPriceChecker;

public class Program
{
    // Yahoo Finance API endpoint for MSFT stock data
    private const string YahooFinanceUrl = "https://query1.finance.yahoo.com/v8/finance/chart/MSFT";

    static async Task Main(string[] args)
    {
        try
        {
            // Fetch MSFT stock price data
            var stockData = await GetMicrosoftStockPrice();

            // Display the data to the user
            DisplayStockInformation(stockData);
        }
        catch (Exception ex)
        {
            // Handle any errors that occur during execution
            Console.WriteLine($"Error occurred: {ex.Message}");
        }

        Console.WriteLine("Press any key to exit...");
        Console.ReadKey();
    }

    /// <summary>
    /// Fetches the latest Microsoft stock price data from Yahoo Finance API
    /// </summary>
    /// <returns>A StockData object containing price information</returns>
    static async Task<StockData> GetMicrosoftStockPrice()
    {
        // Create an HTTP client to make the API request
        using var httpClient = new HttpClient();

        // Add required headers to simulate a browser request (Yahoo Finance may reject requests without proper headers)
        httpClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0");
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        Console.WriteLine("Fetching MSFT stock data from Yahoo Finance...");

        // Make the API call and get the response
        var response = await httpClient.GetStringAsync(YahooFinanceUrl);

        // Parse the JSON response
        return ParseYahooFinanceResponse(response);
    }

    /// <summary>
    /// Parses the Yahoo Finance API JSON response
    /// </summary>
    /// <param name="jsonResponse">The JSON string from the API</param>
    /// <returns>A StockData object with the extracted information</returns>
    static StockData ParseYahooFinanceResponse(string jsonResponse)
    {
        // Parse the JSON document
        using JsonDocument doc = JsonDocument.Parse(jsonResponse);

        // Navigate through the JSON structure to get to the price data
        // Yahoo Finance API has a nested structure we need to traverse
        var result = doc.RootElement.GetProperty("chart").GetProperty("result")[0];
        var meta = result.GetProperty("meta");

        // Extract the relevant stock information
        string symbol = meta.GetProperty("symbol").GetString();
        decimal regularMarketPrice = meta.GetProperty("regularMarketPrice").GetDecimal();
        string currency = meta.GetProperty("currency").GetString();
        string exchange = meta.GetProperty("exchangeName").GetString();

        // Create and return a StockData object with the extracted information
        return new StockData
        {
            Symbol = symbol,
            Price = regularMarketPrice,
            Currency = currency,
            Exchange = exchange,
            LastUpdated = DateTime.Now
        };
    }

    /// <summary>
    /// Displays the stock information in a formatted way to the console
    /// </summary>
    /// <param name="stockData">Stock data to display</param>
    static void DisplayStockInformation(StockData stockData)
    {
        // Format the output with clear labels and proper formatting
        Console.WriteLine("\n===== Microsoft Stock Information =====");
        Console.WriteLine($"Symbol: {stockData.Symbol}");
        Console.WriteLine($"Current Price: {stockData.Price} {stockData.Currency}");
        Console.WriteLine($"Exchange: {stockData.Exchange}");
        Console.WriteLine($"Last Updated: {stockData.LastUpdated:yyyy-MM-dd HH:mm:ss}");
        Console.WriteLine("=====================================\n");
    }
}

/// <summary>
/// Class to store stock data information
/// </summary>
public class StockData
{
    // Stock symbol (e.g., MSFT for Microsoft)
    public string Symbol { get; set; }

    // Current stock price
    public decimal Price { get; set; }

    // Currency of the price (e.g., USD)
    public string Currency { get; set; }

    // Exchange where the stock is traded (e.g., NASDAQ)
    public string Exchange { get; set; }

    // Timestamp of when the data was retrieved
    public DateTime LastUpdated { get; set; }
}